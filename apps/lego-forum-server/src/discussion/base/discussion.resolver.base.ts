/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Discussion } from "./Discussion";
import { DiscussionCountArgs } from "./DiscussionCountArgs";
import { DiscussionFindManyArgs } from "./DiscussionFindManyArgs";
import { DiscussionFindUniqueArgs } from "./DiscussionFindUniqueArgs";
import { CreateDiscussionArgs } from "./CreateDiscussionArgs";
import { UpdateDiscussionArgs } from "./UpdateDiscussionArgs";
import { DeleteDiscussionArgs } from "./DeleteDiscussionArgs";
import { Comment } from "../../comment/base/Comment";
import { DiscussionService } from "../discussion.service";
@graphql.Resolver(() => Discussion)
export class DiscussionResolverBase {
  constructor(protected readonly service: DiscussionService) {}

  async _discussionsMeta(
    @graphql.Args() args: DiscussionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Discussion])
  async discussions(
    @graphql.Args() args: DiscussionFindManyArgs
  ): Promise<Discussion[]> {
    return this.service.discussions(args);
  }

  @graphql.Query(() => Discussion, { nullable: true })
  async discussion(
    @graphql.Args() args: DiscussionFindUniqueArgs
  ): Promise<Discussion | null> {
    const result = await this.service.discussion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Discussion)
  async createDiscussion(
    @graphql.Args() args: CreateDiscussionArgs
  ): Promise<Discussion> {
    return await this.service.createDiscussion({
      ...args,
      data: {
        ...args.data,

        comment: args.data.comment
          ? {
              connect: args.data.comment,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Discussion)
  async updateDiscussion(
    @graphql.Args() args: UpdateDiscussionArgs
  ): Promise<Discussion | null> {
    try {
      return await this.service.updateDiscussion({
        ...args,
        data: {
          ...args.data,

          comment: args.data.comment
            ? {
                connect: args.data.comment,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Discussion)
  async deleteDiscussion(
    @graphql.Args() args: DeleteDiscussionArgs
  ): Promise<Discussion | null> {
    try {
      return await this.service.deleteDiscussion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Comment, {
    nullable: true,
    name: "comment",
  })
  async getComment(
    @graphql.Parent() parent: Discussion
  ): Promise<Comment | null> {
    const result = await this.service.getComment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
